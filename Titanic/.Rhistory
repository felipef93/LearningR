forestR<-randomForest(Survived~.,data=traindata2,mtry=2.5,ntree=500,importance=T,do.trace=100)
#Note that importance and do trace are both very good ways of actually seeing what's happening
#the first allows to see what variable do the forest prioritize, the second if number of trees
#would increase the model
forestR<-randomForest(Survived~.,data=traindata2,mtry=3.5,ntree=500,importance=T,do.trace=100)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(Survived~.,data=traindata2,mtryStart=3, stepFactor=0.01, plot=T)
traindata2[,1:7]
View(traindata2)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.01, plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.5, plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.05, plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.1, plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.2, plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.4, plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.4, plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.4, plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.4, plot=T)
View(test)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.5, plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3, stepFactor=0.5, plot=T)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
View(test)
test
as.matrix(test)
t(as.matrix(test))
t(as.matrix(test[,2]))
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
tuningforest<-matrix(nrow=1000,ncol=3)
for(n in 1:1000){
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3,  plot=T)
tuningforest[n,]<-t(as.matrix(test[,2]))
}
View(tuningforest)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
tuningforest<-matrix(nrow=1000,ncol=6)
for(n in 1:1000){
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3)
tuningforest[n,]<-t(as.matrix(test[,2]))
}
View(tuningforest)
View(testdata)
View(testtree)
View(tuningforest)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3)
View(test)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3)
test<-tuneRF(x=traindata2[,2:8],y=traindata2[,1],mtryStart=3)
View(test)
t(as.matrix(test[,2]))
View(tuningforest)
names(tuningforest)<-c('1.OOB','2.OOB','3.OOB','6.OOB')
View(tuningforest)
names(tuningforest)<-c('1.OOB','2.OOB','3.OOB','6.OOB')
colnames(tuningforest)<-c('1.OOB','2.OOB','3.OOB','6.OOB')
colnames(tuningforest)<-c('1.OOB','2.OOB','3.OOB','4.OOB','5.OOB','6.OOB')
View(tunegrid)
View(tuningforest)
t(as.matrix(test[]))
match()
?match
tuningforest[4,]%in%t(as.matrix(test[]))
colnames(tuningforest)[4,]%in%colnames(t(as.matrix(test[])))
colnames(tuningforest)[4,]
colnames(tuningforest)%in%colnames(t(as.matrix(test[])))
colnames(tuningforest[1])%in%colnames(t(as.matrix(test[])))
install.packages("RRF")
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=0.8)
##############################################################################################
# Create model with default paramters
# control <- trainControl(method="repeatedcv", number=10, repeats=3)
# seed <- 7
# metric <- "Accuracy"
# set.seed(seed)
# mtry <- 7#sqrt(ncol(x))
# tunegrid <- expand.grid(.mtry=mtry)
# rf_default <- train(Survived~., data=traindata2, method="rf", tuneGrid=tunegrid, trControl=control)
# print(rf_default)
library(RRF)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=0.8)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=0.7)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=0.1)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=2)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=0.9)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=1)
#Note that importance and do trace are both very good ways of actually seeing what's happening
#the first allows to see what variable do the forest prioritize, the second if number of trees
#would increase the model
forestR<-randomForest(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=1)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=0.4)
print(forestR)
View(forestR)
Confusion matrix(forestR)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=0.4)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=0.6)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=0.7)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=500,importance=T,do.trace=100, coefReg=0.8)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=1000,importance=T,do.trace=100, coefReg=0.8)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=2000,importance=T,do.trace=100, coefReg=0.8)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=2000,importance=T,do.trace=100, coefReg=0.8)
mtrydefinition<-1:5*0.5+1
##############################################################################################
#            Random Forest - Fist Tunning and Using coefficient of regression                #
##############################################################################################
#as the first forest has clearly not achieved a very good result, I will try to firstly tune
#the mtry parameter, then use a coefficient of regression to decrease the noise interference
#in the model
tune<-matrix(nrow=1000,ncol=6)
mtrydefinition<-1:5*0.5+1
for (n in mtrydefinition){
for(m in 1:1000){
forestR<-randomForest(Survived~.,data=traindata2,mtry=n,ntree=500,importance=T,do.trace=100)
tune[m,n]<-forestR
}
}
forestR
forestR$oob.times
View(forestR)
View(forestR)
forestR$err.rate[,1]
forestR$err.rate[500,1]
##############################################################################################
#            Random Forest - Fist Tunning and Using coefficient of regression                #
##############################################################################################
#as the first forest has clearly not achieved a very good result, I will try to firstly tune
#the mtry parameter, then use a coefficient of regression to decrease the noise interference
#in the model
tune<-matrix(nrow=1000,ncol=6)
mtrydefinition<-1:5*0.5+1
for (n in mtrydefinition){
for(m in 1:1000){
forestR<-randomForest(Survived~.,data=traindata2,mtry=n,ntree=500)
tune[m,n]<-forestR$err.rate[500,1]
}
}
View(tune)
mtrydefinition
View(tune)
##############################################################################################
#            Random Forest - Fist Tunning and Using coefficient of regression                #
##############################################################################################
#as the first forest has clearly not achieved a very good result, I will try to firstly tune
#the mtry parameter, then use a coefficient of regression to decrease the noise interference
#in the model
tune<-matrix(nrow=1000,ncol=6)
##############################################################################################
#            Random Forest - Fist Tunning and Using coefficient of regression                #
##############################################################################################
#as the first forest has clearly not achieved a very good result, I will try to firstly tune
#the mtry parameter, then use a coefficient of regression to decrease the noise interference
#in the model
tune<-matrix(nrow=1000,ncol=3)
mtrydefinition<-c(2,3,4)
tune<-as.data.frame(tune)
names(tune)<-mttrydefinition
mtrydefinition<-c(2,3,4)
names(tune)<-mttrydefinition
names(tune)<-mtrydefinition
View(tune)
for (n in mtrydefinition){
for(m in 1:1000){
forestR<-randomForest(Survived~.,data=traindata2,mtry=n,ntree=200)
tune[m,n]<-forestR$err.rate[500,1]
}
}
##############################################################################################
#            Random Forest - Fist Tunning and Using coefficient of regression                #
##############################################################################################
#as the first forest has clearly not achieved a very good result, I will try to firstly tune
#the mtry parameter, then use a coefficient of regression to decrease the noise interference
#in the model
tune<-matrix(nrow=1000,ncol=3)
mtrydefinition<-c(2,3,4)
tune<-as.data.frame(tune)
names(tune)<-mtrydefinition
for (n in mtrydefinition){
for(m in 1:1000){
forestR<-randomForest(Survived~.,data=traindata2,mtry=n,ntree=200)
tune[m,n]<-forestR$err.rate[200,1]
}
}
View(tune)
mtrydefinition<-c(2,3,4)
mtrydefinition<-1:5*0.5+1
mtrydefinition<-1:5*0.5+1
mtrydefinition
tune<-as.data.frame(tune)
names(tune)<-mtrydefinition
##############################################################################################
#            Random Forest - Fist Tunning and Using coefficient of regression                #
##############################################################################################
#as the first forest has clearly not achieved a very good result, I will try to firstly tune
#the mtry parameter, then use a coefficient of regression to decrease the noise interference
#in the model
tune<-matrix(nrow=1000,ncol=6)
mtrydefinition<-1:5*0.5+1
tune<-as.data.frame(tune)
names(tune)<-mtrydefinition
View(tune)
##############################################################################################
#            Random Forest - Fist Tunning and Using coefficient of regression                #
##############################################################################################
#as the first forest has clearly not achieved a very good result, I will try to firstly tune
#the mtry parameter, then use a coefficient of regression to decrease the noise interference
#in the model
tune<-matrix(nrow=1000,ncol=5)
mtrydefinition<-1:5*0.5+1
View(tuningforest)
View(tune)
tune<-as.data.frame(tune)
names(tune)<-mtrydefinition
View(tune)
dummy=0
for (n in mtrydefinition){
dummy=dummy+1
for(m in 1:1000){
forestR<-randomForest(Survived~.,data=traindata2,mtry=n,ntree=200)
tune[m,dummy]<-forestR$err.rate[200,1]
}
}
View(tune)
mean(tune)
colMeans(tune)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=2000,importance=T,do.trace=100, coefReg=0.8)
# from tuning data 3 was the best parameter.
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=2000,importance=T,do.trace=100, coefReg=0.8)
# from tuning data 3 was the best parameter.
set.seed(123)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=2000,importance=T,do.trace=100, coefReg=0.8)
prediction.rf <- predict(forestR2, testdata)
submission3<-matrix(nrow=418,ncol=2)
submission3[,1]<-testdata[,1]
submission3[,2]<-as.numeric(prediction.rf)-1
for (n in 1:418){if (is.na(submission2[n,2]))
submission2[n,2]<-submission[n,2]}
submission3<-as.data.frame(submission3)
View(submission3)
for (n in 1:418){if (is.na(submission3[n,2]))
submission3[n,2]<-submission[n,2]}
submission3<-as.data.frame(submission3)
View(submission3)
names(submission3)<-c("PassengerId","Survived")
write.csv(submission3,file="submission3.csv",row.names = FALSE)
# from tuning data 3 was the best parameter.
set.seed(456)
forestR2<-RRF(Survived~.,data=traindata2,mtry=3,ntree=2000,importance=T,do.trace=100, coefReg=0.8)
prediction.rf <- predict(forestR2, testdata)
submission3<-matrix(nrow=418,ncol=2)
submission3[,1]<-testdata[,1]
submission3[,2]<-as.numeric(prediction.rf)-1
for (n in 1:418){if (is.na(submission3[n,2]))
submission3[n,2]<-submission[n,2]}
submission3<-as.data.frame(submission3)
names(submission3)<-c("PassengerId","Survived")
write.csv(submission3,file="submission3.csv",row.names = FALSE)
